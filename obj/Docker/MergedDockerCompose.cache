networks:
  backend: {}
  frontend: {}
services:
  basket.data:
    container_name: eventshubbasketdata
    image: redis
    networks:
      backend: null
    ports:
    - published: 7051
      target: 6379
  cart:
    build:
      context: F:\Cohort\EventsHub\CartAPI
      dockerfile: Dockerfile
    container_name: eventshubcartapi
    depends_on:
      basket.data:
        condition: service_started
      rabbitmq:
        condition: service_started
      tokenserver:
        condition: service_started
    environment:
      ConnectionString: basket.data
      IdentityUrl: http://192.168.168.67:7801
    image: eventshub/cartapi
    logging:
      driver: json-file
      options:
        max-file: '10'
        max-size: 200k
    networks:
      backend: null
      frontend: null
    ports:
    - published: 7011
      target: 80
  eventshubcatalogapi:
    build:
      context: F:\Cohort\EventsHub\EventsHubCatalogAPI
      dockerfile: Dockerfile
    container_name: eventshubcatalogapi
    depends_on:
      mssqlserver:
        condition: service_started
    environment:
      ConnectionString: Data Source=mssqlserver;Initial Catalog=EventsHubDb;User Id=sa;Password=ProductApi123(!);Connect
        Timeout=30;TrustServerCertificate=false;Encrypt=false;
      ExternalBaseUrl: http://localhost:7024
    image: eventshub/catalogapi
    networks:
      backend: null
      frontend: null
    ports:
    - published: 7024
      target: 80
  mssqlserver:
    container_name: eventshubsqlserver
    environment:
      ACCEPT_EULA: "Y"
      MSSQL_SA_PASSWORD: ProductApi123(!)
      SA_PASSWORD: ProductApi123(!)
    image: mcr.microsoft.com/mssql/server:latest
    networks:
      backend: null
    ports:
    - published: 1450
      target: 1433
  order:
    build:
      context: F:\Cohort\EventsHub\OrderAPI
      dockerfile: Dockerfile
    container_name: eventshuborderapi
    depends_on:
      ordersqlserver:
        condition: service_started
      rabbitmq:
        condition: service_started
      tokenserver:
        condition: service_started
    environment:
      ConnectionString: Data Source=ordersqlserver;Initial Catalog=OrdersDb;User Id=sa;Password=ProductApi123(!);Connect
        Timeout=30;TrustServerCertificate=false;Encrypt=false;
      IdentityUrl: http://192.168.168.67:7801
    image: eventshub/orderapi
    logging:
      driver: json-file
      options:
        max-file: '10'
        max-size: 200k
    networks:
      backend: null
      frontend: null
    ports:
    - published: 7021
      target: 80
  ordersqlserver:
    container_name: eventshubordersqlserver
    environment:
      ACCEPT_EULA: "Y"
      MSSQL_SA_PASSWORD: ProductApi123(!)
      SA_PASSWORD: ProductApi123(!)
    image: mcr.microsoft.com/mssql/server:latest
    networks:
      backend: null
    ports:
    - published: 1451
      target: 1433
  rabbitmq:
    container_name: rabbitmq
    hostname: myrabbitmq
    image: rabbitmq:3
    networks:
      backend: null
    ports:
    - published: 15672
      target: 15672
    - published: 5672
      target: 5672
    - published: 5671
      target: 5671
  tokenserver:
    build:
      context: F:\Cohort\EventsHub\TokenServiceAPI
      dockerfile: Dockerfile
    container_name: eventshubtokenapi
    depends_on:
      tokensqlserver:
        condition: service_started
    environment:
      ConnectionString: Data Source=tokensqlserver;Initial Catalog=TokenServiceDb;User
        Id=sa;Password=ProductApi123(!);Connect Timeout=30;TrustServerCertificate=false;Encrypt=false;
      MvcClient: http://localhost:7501
    image: eventshub/tokenapi
    networks:
      backend: null
      frontend: null
    ports:
    - published: 7801
      target: 80
  tokensqlserver:
    container_name: eventshubtokensqlserver
    environment:
      ACCEPT_EULA: "Y"
      MSSQL_SA_PASSWORD: ProductApi123(!)
      SA_PASSWORD: ProductApi123(!)
    image: mcr.microsoft.com/mssql/server:latest
    networks:
      backend: null
    ports:
    - published: 1447
      target: 1433
  webmvc:
    build:
      context: F:\Cohort\EventsHub\WebMvc
      dockerfile: Dockerfile
    container_name: eventswebshop
    depends_on:
      cart:
        condition: service_started
      eventshubcatalogapi:
        condition: service_started
      order:
        condition: service_started
      tokenserver:
        condition: service_started
    environment:
      CallbackUrl: http://localhost:7501
      CartUrl: http://cart
      CatalogUrl: http://eventshubcatalogapi
      IdentityUrl: http://192.168.168.67:7801
      OrderUrl: http://order
      StripePrivateKey: sk_test_bSHT9qxwjpyCOP0qdAvHLfAA
      StripePublicKey: pk_test_jZlpubvlPmcV6QJPReImelQy
    image: eventshub/webmvc
    logging:
      driver: json-file
      options:
        max-file: '10'
        max-size: 200k
    networks:
      frontend: null
    ports:
    - published: 7501
      target: 80
version: '3.4'